// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewElP2PClient creates a new instance of ElP2PClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewElP2PClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ElP2PClient {
	mock := &ElP2PClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ElP2PClient is an autogenerated mock type for the ElP2PClient type
type ElP2PClient struct {
	mock.Mock
}

type ElP2PClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ElP2PClient) EXPECT() *ElP2PClient_Expecter {
	return &ElP2PClient_Expecter{mock: &_m.Mock}
}

// PeerCount provides a mock function for the type ElP2PClient
func (_mock *ElP2PClient) PeerCount(ctx context.Context) (int, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PeerCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ElP2PClient_PeerCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PeerCount'
type ElP2PClient_PeerCount_Call struct {
	*mock.Call
}

// PeerCount is a helper method to define mock.On call
//   - ctx
func (_e *ElP2PClient_Expecter) PeerCount(ctx interface{}) *ElP2PClient_PeerCount_Call {
	return &ElP2PClient_PeerCount_Call{Call: _e.mock.On("PeerCount", ctx)}
}

func (_c *ElP2PClient_PeerCount_Call) Run(run func(ctx context.Context)) *ElP2PClient_PeerCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ElP2PClient_PeerCount_Call) Return(n int, err error) *ElP2PClient_PeerCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *ElP2PClient_PeerCount_Call) RunAndReturn(run func(ctx context.Context) (int, error)) *ElP2PClient_PeerCount_Call {
	_c.Call.Return(run)
	return _c
}
